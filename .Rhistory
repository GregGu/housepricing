dplyr::mutate_at(char_vars_missing, ~tidyr::replace_na(., "not-appl"))  %>%
dplyr::mutate_at(num_vars_missing, ~tidyr::replace_na(., 0)) %>%
dplyr::mutate(GarageYrBlt = ifelse(GarageYrBlt == 0, YearBuilt, GarageYrBlt)) #custom replacement for garrageyrblt
# removing some vars that are entirely one group
df <- df %>%
dplyr::select(-c("Street", "Utilities", "RoofMatl", "Heating"))
# RESPONSE VARIABLE (move this past processing to EDA)
# check dist of response var is statistically different from normal
hist(dftrain$SalePrice,probability=T, main="Histogram of sales price", 50)
norm <- rnorm(100000, mean(dftrain$SalePrice), sd(dftrain$SalePrice))
lines(density(dftrain$SalePrice), col=1)
lines(density(norm),col=2)
# pointy dist with heavy tail on the right
shapiro.test(dftrain$SalePrice)
df <- df %>%
dplyr::mutate(SalePrice = log(SalePrice))
hist(df$SalePrice,probability=T, main="Histogram of sales price", 50)
charvars <- names(df)[sapply(df, class) == 'character']
dftemp <- df %>%
dplyr::mutate_at(charvars, as.factor) %>%
dplyr::mutate(MSSubClass = as.factor(MSSubClass))
nom_vars <- names(dftemp)[sapply(dftemp, class) == 'factor']
num_ord_vars <- names(dftemp)[!names(dftemp) %in% nom_vars]
tempnom <- dftemp %>%
dplyr::select(c("SalePrice", nom_vars)) %>% # including sale price with ordinal as well
dplyr::select(-set) %>%
mixed_assoc() %>%
dplyr::select(x, y, assoc) %>%
tidyr::spread(y, assoc) %>%
tibble::column_to_rownames("x")
tempnum <- dftemp %>%
dplyr::select(c("SalePrice", num_ord_vars)) %>% # including sale price with ordinal as well
mixed_assoc() %>%
dplyr::select(x, y, assoc) %>%
tidyr::spread(y, assoc) %>%
tibble::column_to_rownames("x")
temp <- dftemp %>%
dplyr::select(c("SalePrice", num_ord_vars, nom_vars)) %>% # including sale price with ordinal as well
dplyr::select(-set) %>%
mixed_assoc() %>%
dplyr::select(x, y, assoc) %>%
tidyr::spread(y, assoc) %>%
tibble::column_to_rownames("x")
# allowing for all overlap text
options(ggrepel.max.overlaps = Inf)
tempnom %>%
as.matrix %>%
corrr::as_cordf() %>%
corrr::network_plot(min_cor = 0.3)
# corrplot::corrplot(tempnom %>% as.matrix %>% .[dim(tempnom)[1]:1,dim(tempnom)[1]:1], method = 'square', order = 'FPC', type = 'lower', diag = TRUE, tl.col = "black", tl.cex=.75)
tempnum %>%
as.matrix %>%
corrr::as_cordf() %>%
corrr::network_plot(min_cor = 0.3)
corrplot::corrplot(temp %>% as.matrix %>% .[dim(temp)[1]:1,dim(temp)[1]:1], method = 'square', order = 'FPC', type = 'lower', diag = TRUE, tl.col = "black", tl.cex=.75)
library(ggplot2)
ggplot(df) +
geom_point(aes(x = GrLivArea, y = SalePrice))
df %>%
dplyr::filter(GrLivArea > 4500) %>%
dplyr::select(GrLivArea, YearBuilt, OverallQual, SaleType, MSZoning, TotalBsmtSF, set)
df <- df %>%
dplyr::filter(!(GrLivArea > 4500 & set == "train"))
ggplot(df) +
geom_point(aes(x = GarageArea, y = SalePrice))
hist(df$GarageArea,probability=T, main="Histogram of sales price", 50)
norm <- rnorm(100000, mean(df$GarageArea), sd(df$GarageArea))
lines(density(df$GarageArea), col=1)
lines(density(norm),col=2)
shapiro.test(df$GarageArea)
ggplot(df, aes(x=as.factor(OverallQual), y=SalePrice)) +
geom_violin() +
geom_boxplot(width=0.1)
nomvars <- names(df)[sapply(df, class) == 'factor']
temp <- df %>%
dplyr::select(nomvars)
summary(temp)
df <- df %>%
dplyr::mutate(YrSold = as.factor(as.character(YrSold))) %>%
dplyr::mutate(MoSold = as.factor(as.character(MoSold))) %>%
nomvars_of_interest <- c(
"Neighborhood",
"MSZoning",
"SaleCondition",
"BsmtExposure",
"KitchenQual",
"GarageType",
"PavedDrive",
"YrSold",
"MoSold")
df <- df %>%
dplyr::mutate(YrSold = as.factor(as.character(YrSold))) %>%
dplyr::mutate(MoSold = as.factor(as.character(MoSold)))
nomvars_of_interest <- c(
"Neighborhood",
"MSZoning",
"SaleCondition",
"BsmtExposure",
"KitchenQual",
"GarageType",
"PavedDrive",
"YrSold",
"MoSold")
df2 <- df %>%
dplyr::select(c(nomvars_of_interest, "set")) %>%
dplyr::mutate_at(nomvars_of_interest, as.factor) %>%
dplyr::filter(set == "train") %>%
dplyr::select(-set)
library(caret)
dummy <- dummyVars(" ~ .", data=df2)
df3 <- data.frame(predict(dummy, newdata = df2))
y <- df %>%
dplyr::filter(set == "train") %>%
dplyr::pull(SalePrice)
library(glmnet)
library(plotmo)
# Lets do individual lasso instead
# Can we figure out weights from munic real estate paper?
for (name in names(df2)) {
dftemp <- df3 %>% dplyr::select(dplyr::starts_with(name))
print(df3 %>% dplyr::select(dplyr::starts_with(name)) %>% colnames)
fit <- glmnet(dftemp, y = y, alpha = 1) #alpha 1 is lasso, 0 is ridge
plot_glmnet(fit, label=TRUE)
}
df <- df %>%
dplyr::mutate(Age = YrSold-YearBuilt) %>%
dplyr::mutate(AgeOfRemodel = YrSold-YearRemodAdd) %>%
dplyr::mutate(SeasonalSell = ifelse(MoSold %in% c(3,4,5,6,7,8), 1,0))
ggplot(df) +
geom_point(aes(x = Age, y = SalePrice))
df <- df %>%
dplyr::mutate(YearBuilt = as.factor(as.character(YearBuilt))) %>%
nomvars_of_interest <- c(
"Neighborhood",
"MSZoning",
"SaleCondition",
"BsmtExposure",
"KitchenQual",
"GarageType",
"PavedDrive",
"Age")
df <- df %>%
dplyr::mutate(YearBuilt = as.factor(as.character(YearBuilt))) %>%
nomvars_of_interest <- c(
"Neighborhood",
"MSZoning",
"SaleCondition",
"BsmtExposure",
"KitchenQual",
"GarageType",
"PavedDrive",
"YearBuilt")
df <- df %>%
dplyr::mutate(YearBuilt = as.factor(as.character(YearBuilt)))
nomvars_of_interest <- c(
"Neighborhood",
"MSZoning",
"SaleCondition",
"BsmtExposure",
"KitchenQual",
"GarageType",
"PavedDrive",
"YearBuilt")
df2 <- df %>%
dplyr::select(c(nomvars_of_interest, "set")) %>%
dplyr::mutate_at(nomvars_of_interest, as.factor) %>%
dplyr::filter(set == "train") %>%
dplyr::select(-set)
library(caret)
dummy <- dummyVars(" ~ .", data=df2)
df3 <- data.frame(predict(dummy, newdata = df2))
y <- df %>%
dplyr::filter(set == "train") %>%
dplyr::pull(SalePrice)
library(glmnet)
library(plotmo)
# Lets do individual lasso instead
# Can we figure out weights from munic real estate paper?
for (name in names(df2)) {
dftemp <- df3 %>% dplyr::select(dplyr::starts_with(name))
print(df3 %>% dplyr::select(dplyr::starts_with(name)) %>% colnames)
fit <- glmnet(dftemp, y = y, alpha = 1) #alpha 1 is lasso, 0 is ridge
plot_glmnet(fit, label=TRUE)
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
# knitr::opts_knit$get("root.dir")  # alternative to the previous line
# the default autosave location will depend on this being setup
options(warn=-1)
devtools::load_all()
x <- list(
"magrittr",
"tidyverse",
"purrr",
"rcompanion",
"naniar",
"caret", # for dummy and one hot encode
"glmnet",
"plotmo",
"corrr",
"corrplot")
lapply(x, require, character.only = TRUE)
# IMPORTING
# Import training and test data, which we will soon combine, as we want to process explanatory variables together
dftrain <- read.csv(here::here("data-raw", "train.csv")) %>% dplyr::mutate(set = "train")
dftest <- read.csv(here::here("data-raw", "test.csv")) %>% dplyr::mutate(set = "test") %>% dplyr::mutate(SalePrice = NA)
df <- dplyr::bind_rows(dftrain, dftest)
df %>%
naniar::miss_var_summary() %>%
dplyr::filter(pct_miss > 0) %>%
print(n=Inf)
# PoolQC and MiscFeatures are too heavily not-applicable and will not be useful
df <- df %>%
dplyr::select(-c("PoolQC", "MiscFeature"))
vars_missing <- df %>%
naniar::miss_var_summary() %>%
dplyr::filter(pct_miss > 0) %>%
dplyr::pull(variable)
charvars <- names(df)[sapply(df, class) == 'character']
char_vars_missing <- vars_missing[vars_missing %in% charvars]
num_vars_missing <- vars_missing[!vars_missing %in% c(charvars, "SalePrice")]
# Impute NAs with "not-appl"
df <- df %>%
dplyr::mutate_at(char_vars_missing, ~tidyr::replace_na(., "not-appl"))  %>%
dplyr::mutate_at(num_vars_missing, ~tidyr::replace_na(., 0)) %>%
dplyr::mutate(GarageYrBlt = ifelse(GarageYrBlt == 0, YearBuilt, GarageYrBlt)) #custom replacement for garrageyrblt
# removing some vars that are entirely one group
df <- df %>%
dplyr::select(-c("Street", "Utilities", "RoofMatl", "Heating"))
# RESPONSE VARIABLE (move this past processing to EDA)
# check dist of response var is statistically different from normal
hist(dftrain$SalePrice,probability=T, main="Histogram of sales price", 50)
norm <- rnorm(100000, mean(dftrain$SalePrice), sd(dftrain$SalePrice))
lines(density(dftrain$SalePrice), col=1)
lines(density(norm),col=2)
# pointy dist with heavy tail on the right
shapiro.test(dftrain$SalePrice)
df <- df %>%
dplyr::mutate(SalePrice = log(SalePrice))
hist(df$SalePrice,probability=T, main="Histogram of sales price", 50)
charvars <- names(df)[sapply(df, class) == 'character']
dftemp <- df %>%
dplyr::mutate_at(charvars, as.factor) %>%
dplyr::mutate(MSSubClass = as.factor(MSSubClass))
nom_vars <- names(dftemp)[sapply(dftemp, class) == 'factor']
num_ord_vars <- names(dftemp)[!names(dftemp) %in% nom_vars]
tempnom <- dftemp %>%
dplyr::select(c("SalePrice", nom_vars)) %>% # including sale price with ordinal as well
dplyr::select(-set) %>%
mixed_assoc() %>%
dplyr::select(x, y, assoc) %>%
tidyr::spread(y, assoc) %>%
tibble::column_to_rownames("x")
tempnum <- dftemp %>%
dplyr::select(c("SalePrice", num_ord_vars)) %>% # including sale price with ordinal as well
mixed_assoc() %>%
dplyr::select(x, y, assoc) %>%
tidyr::spread(y, assoc) %>%
tibble::column_to_rownames("x")
temp <- dftemp %>%
dplyr::select(c("SalePrice", num_ord_vars, nom_vars)) %>% # including sale price with ordinal as well
dplyr::select(-set) %>%
mixed_assoc() %>%
dplyr::select(x, y, assoc) %>%
tidyr::spread(y, assoc) %>%
tibble::column_to_rownames("x")
# allowing for all overlap text
options(ggrepel.max.overlaps = Inf)
tempnom %>%
as.matrix %>%
corrr::as_cordf() %>%
corrr::network_plot(min_cor = 0.3)
# corrplot::corrplot(tempnom %>% as.matrix %>% .[dim(tempnom)[1]:1,dim(tempnom)[1]:1], method = 'square', order = 'FPC', type = 'lower', diag = TRUE, tl.col = "black", tl.cex=.75)
tempnum %>%
as.matrix %>%
corrr::as_cordf() %>%
corrr::network_plot(min_cor = 0.3)
corrplot::corrplot(temp %>% as.matrix %>% .[dim(temp)[1]:1,dim(temp)[1]:1], method = 'square', order = 'FPC', type = 'lower', diag = TRUE, tl.col = "black", tl.cex=.75)
library(ggplot2)
ggplot(df) +
geom_point(aes(x = GrLivArea, y = SalePrice))
df %>%
dplyr::filter(GrLivArea > 4500) %>%
dplyr::select(GrLivArea, YearBuilt, OverallQual, SaleType, MSZoning, TotalBsmtSF, set)
df <- df %>%
dplyr::filter(!(GrLivArea > 4500 & set == "train"))
ggplot(df) +
geom_point(aes(x = GarageArea, y = SalePrice))
hist(df$GarageArea,probability=T, main="Histogram of sales price", 50)
norm <- rnorm(100000, mean(df$GarageArea), sd(df$GarageArea))
lines(density(df$GarageArea), col=1)
lines(density(norm),col=2)
shapiro.test(df$GarageArea)
ggplot(df, aes(x=as.factor(OverallQual), y=SalePrice)) +
geom_violin() +
geom_boxplot(width=0.1)
nomvars <- names(df)[sapply(df, class) == 'factor']
temp <- df %>%
dplyr::select(nomvars)
summary(temp)
seq(0,1,10)
seq(0,1,.1)
df <- df %>%
df$YearBuilt
df <- df %>%
dplyr::mutate(YearBuilt = cut(quantile(YearBuilt, seq(0,1,.1), labels = seq(1,10))))
?cut
df <- df %>%
dplyr::mutate(YearBuilt = cut(quantile(YearBuilt, seq(0,1,.1)), labels = seq(1,10))))
df <- df %>%
dplyr::mutate(YearBuilt = cut(quantile(YearBuilt, seq(0,1,.1)), labels = seq(1,10)))
df <- df %>%
dplyr::mutate(YearBuilt = cut(YearBuilt, quantile(YearBuilt, seq(0,1,.1)), labels = seq(1,10)))
df$YearBuilt
nomvars_of_interest <- c(
"Neighborhood",
"MSZoning",
"SaleCondition",
"BsmtExposure",
"KitchenQual",
"GarageType",
"PavedDrive",
"YearBuilt")
library(caret)
dummy <- dummyVars(" ~ .", data=df2)
df3 <- data.frame(predict(dummy, newdata = df2))
y <- df %>%
dplyr::filter(set == "train") %>%
dplyr::pull(SalePrice)
library(glmnet)
library(plotmo)
# Lets do individual lasso instead
# Can we figure out weights from munic real estate paper?
for (name in names(df2)) {
dftemp <- df3 %>% dplyr::select(dplyr::starts_with(name))
print(df3 %>% dplyr::select(dplyr::starts_with(name)) %>% colnames)
fit <- glmnet(dftemp, y = y, alpha = 1) #alpha 1 is lasso, 0 is ridge
plot_glmnet(fit, label=TRUE)
}
df$YearBuilt
nomvars_of_interest <- c(
"Neighborhood",
"MSZoning",
"SaleCondition",
"BsmtExposure",
"KitchenQual",
"GarageType",
"PavedDrive",
"YearBuilt")
df2 <- df %>%
dplyr::select(c(nomvars_of_interest, "set")) %>%
dplyr::mutate_at(nomvars_of_interest, as.factor) %>%
dplyr::filter(set == "train") %>%
dplyr::select(-set)
df2$YearBuilt
library(caret)
dummy <- dummyVars(" ~ .", data=df2)
df <- df %>%
dplyr::mutate(YearBuilt = as.factor(cut(YearBuilt, quantile(YearBuilt, seq(0,1,.1)), labels = seq(1,10))))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
# knitr::opts_knit$get("root.dir")  # alternative to the previous line
# the default autosave location will depend on this being setup
options(warn=-1)
devtools::load_all()
x <- list(
"magrittr",
"tidyverse",
"purrr",
"rcompanion",
"naniar",
"caret", # for dummy and one hot encode
"glmnet",
"plotmo",
"corrr",
"corrplot")
lapply(x, require, character.only = TRUE)
# IMPORTING
# Import training and test data, which we will soon combine, as we want to process explanatory variables together
dftrain <- read.csv(here::here("data-raw", "train.csv")) %>% dplyr::mutate(set = "train")
dftest <- read.csv(here::here("data-raw", "test.csv")) %>% dplyr::mutate(set = "test") %>% dplyr::mutate(SalePrice = NA)
df <- dplyr::bind_rows(dftrain, dftest)
df %>%
naniar::miss_var_summary() %>%
dplyr::filter(pct_miss > 0) %>%
print(n=Inf)
# PoolQC and MiscFeatures are too heavily not-applicable and will not be useful
df <- df %>%
dplyr::select(-c("PoolQC", "MiscFeature"))
vars_missing <- df %>%
naniar::miss_var_summary() %>%
dplyr::filter(pct_miss > 0) %>%
dplyr::pull(variable)
charvars <- names(df)[sapply(df, class) == 'character']
char_vars_missing <- vars_missing[vars_missing %in% charvars]
num_vars_missing <- vars_missing[!vars_missing %in% c(charvars, "SalePrice")]
# Impute NAs with "not-appl"
df <- df %>%
dplyr::mutate_at(char_vars_missing, ~tidyr::replace_na(., "not-appl"))  %>%
dplyr::mutate_at(num_vars_missing, ~tidyr::replace_na(., 0)) %>%
dplyr::mutate(GarageYrBlt = ifelse(GarageYrBlt == 0, YearBuilt, GarageYrBlt)) #custom replacement for garrageyrblt
# removing some vars that are entirely one group
df <- df %>%
dplyr::select(-c("Street", "Utilities", "RoofMatl", "Heating"))
# RESPONSE VARIABLE (move this past processing to EDA)
# check dist of response var is statistically different from normal
hist(dftrain$SalePrice,probability=T, main="Histogram of sales price", 50)
norm <- rnorm(100000, mean(dftrain$SalePrice), sd(dftrain$SalePrice))
lines(density(dftrain$SalePrice), col=1)
lines(density(norm),col=2)
# pointy dist with heavy tail on the right
shapiro.test(dftrain$SalePrice)
df <- df %>%
dplyr::mutate(SalePrice = log(SalePrice))
hist(df$SalePrice,probability=T, main="Histogram of sales price", 50)
charvars <- names(df)[sapply(df, class) == 'character']
dftemp <- df %>%
dplyr::mutate_at(charvars, as.factor) %>%
dplyr::mutate(MSSubClass = as.factor(MSSubClass))
nom_vars <- names(dftemp)[sapply(dftemp, class) == 'factor']
num_ord_vars <- names(dftemp)[!names(dftemp) %in% nom_vars]
tempnom <- dftemp %>%
dplyr::select(c("SalePrice", nom_vars)) %>% # including sale price with ordinal as well
dplyr::select(-set) %>%
mixed_assoc() %>%
dplyr::select(x, y, assoc) %>%
tidyr::spread(y, assoc) %>%
tibble::column_to_rownames("x")
tempnum <- dftemp %>%
dplyr::select(c("SalePrice", num_ord_vars)) %>% # including sale price with ordinal as well
mixed_assoc() %>%
dplyr::select(x, y, assoc) %>%
tidyr::spread(y, assoc) %>%
tibble::column_to_rownames("x")
temp <- dftemp %>%
dplyr::select(c("SalePrice", num_ord_vars, nom_vars)) %>% # including sale price with ordinal as well
dplyr::select(-set) %>%
mixed_assoc() %>%
dplyr::select(x, y, assoc) %>%
tidyr::spread(y, assoc) %>%
tibble::column_to_rownames("x")
# allowing for all overlap text
options(ggrepel.max.overlaps = Inf)
tempnom %>%
as.matrix %>%
corrr::as_cordf() %>%
corrr::network_plot(min_cor = 0.3)
# corrplot::corrplot(tempnom %>% as.matrix %>% .[dim(tempnom)[1]:1,dim(tempnom)[1]:1], method = 'square', order = 'FPC', type = 'lower', diag = TRUE, tl.col = "black", tl.cex=.75)
tempnum %>%
as.matrix %>%
corrr::as_cordf() %>%
corrr::network_plot(min_cor = 0.3)
corrplot::corrplot(temp %>% as.matrix %>% .[dim(temp)[1]:1,dim(temp)[1]:1], method = 'square', order = 'FPC', type = 'lower', diag = TRUE, tl.col = "black", tl.cex=.75)
library(ggplot2)
ggplot(df) +
geom_point(aes(x = GrLivArea, y = SalePrice))
df %>%
dplyr::filter(GrLivArea > 4500) %>%
dplyr::select(GrLivArea, YearBuilt, OverallQual, SaleType, MSZoning, TotalBsmtSF, set)
df <- df %>%
dplyr::filter(!(GrLivArea > 4500 & set == "train"))
ggplot(df) +
geom_point(aes(x = GarageArea, y = SalePrice))
hist(df$GarageArea,probability=T, main="Histogram of sales price", 50)
norm <- rnorm(100000, mean(df$GarageArea), sd(df$GarageArea))
lines(density(df$GarageArea), col=1)
lines(density(norm),col=2)
shapiro.test(df$GarageArea)
ggplot(df, aes(x=as.factor(OverallQual), y=SalePrice)) +
geom_violin() +
geom_boxplot(width=0.1)
nomvars <- names(df)[sapply(df, class) == 'factor']
temp <- df %>%
dplyr::select(nomvars)
summary(temp)
df <- df %>%
dplyr::mutate(YearBuilt = as.factor(cut(YearBuilt, quantile(YearBuilt, seq(0,1,.1)), labels = seq(1,10))))
nomvars_of_interest <- c(
"Neighborhood",
"MSZoning",
"SaleCondition",
"BsmtExposure",
"KitchenQual",
"GarageType",
"PavedDrive",
"YearBuilt")
df2 <- df %>%
dplyr::select(c(nomvars_of_interest, "set")) %>%
dplyr::mutate_at(nomvars_of_interest, as.factor) %>%
dplyr::filter(set == "train") %>%
dplyr::select(-set)
library(caret)
dummy <- dummyVars(" ~ .", data=df2)
df3 <- data.frame(predict(dummy, newdata = df2))
y <- df %>%
dplyr::filter(set == "train") %>%
dplyr::pull(SalePrice)
library(glmnet)
library(plotmo)
# Lets do individual lasso instead
# Can we figure out weights from munic real estate paper?
for (name in names(df2)) {
dftemp <- df3 %>% dplyr::select(dplyr::starts_with(name))
print(df3 %>% dplyr::select(dplyr::starts_with(name)) %>% colnames)
fit <- glmnet(dftemp, y = y, alpha = 1) #alpha 1 is lasso, 0 is ridge
plot_glmnet(fit, label=TRUE)
}
df$YearBuilt
View(dftemp)
tempdir()
tempdir
tempdir()
